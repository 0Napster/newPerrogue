{"version":3,"sources":["gulpfile.babel.js"],"names":[],"mappings":"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","file":"gulpfile.babel-compiled.js","sourcesContent":["/**\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n\n'use strict';\n\n// This gulpfile makes use of new JavaScript features.\n// Babel handles this without us having to do anything. It just works.\n// You can read more about the new JavaScript features here:\n// https://babeljs.io/docs/learn-es2015/\n\nimport fs from 'fs';\nimport path from 'path';\nimport gulp from 'gulp';\nimport del from 'del';\nimport runSequence from 'run-sequence';\nimport browserSync from 'browser-sync';\nimport swPrecache from 'sw-precache';\nimport gulpLoadPlugins from 'gulp-load-plugins';\nimport {output as pagespeed} from 'psi';\nimport pkg from './package.json';\n\nconst $ = gulpLoadPlugins();\nconst reload = browserSync.reload;\n\n// Lint JavaScript\ngulp.task('lint', () =>\n        gulp.src('app/scripts/**/*.js')\n            .pipe($.eslint())\n            .pipe($.eslint.format())\n            .pipe($.if(!browserSync.active, $.eslint.failOnError()))\n);\n\n// Optimize images\ngulp.task('images', () =>\n        gulp.src('app/images/**/*')\n            .pipe($.cache($.imagemin({\n                progressive: true,\n                interlaced: true\n            })))\n            .pipe(gulp.dest('dist/images'))\n            .pipe($.size({title: 'images'}))\n);\n\n// Copy all files at the root level (app)\ngulp.task('copy', () =>\n        gulp.src([\n            'app/*',\n            '!app/*.html',\n            'node_modules/apache-server-configs/dist/.htaccess'\n        ], {\n            dot: true\n        }).pipe(gulp.dest('dist'))\n            .pipe($.size({title: 'copy'}))\n);\n\n// Compile and automatically prefix stylesheets\ngulp.task('styles', () => {\n    const AUTOPREFIXER_BROWSERS = [\n        'ie >= 10',\n        'ie_mob >= 10',\n        'ff >= 30',\n        'chrome >= 34',\n        'safari >= 7',\n        'opera >= 23',\n        'ios >= 7',\n        'android >= 4.4',\n        'bb >= 10'\n    ];\n\n    // For best performance, don't add Sass partials to `gulp.src`\n    return gulp.src([\n        'app/styles/**/*.scss',\n        'app/styles/**/*.css'\n    ])\n        .pipe($.newer('.tmp/styles'))\n        .pipe($.sourcemaps.init())\n        .pipe($.sass({\n            precision: 10\n        }).on('error', $.sass.logError))\n        .pipe($.autoprefixer(AUTOPREFIXER_BROWSERS))\n        .pipe(gulp.dest('.tmp/styles'))\n        // Concatenate and minify styles\n        .pipe($.if('*.css', $.minifyCss()))\n        .pipe($.size({title: 'styles'}))\n        .pipe($.sourcemaps.write('./'))\n        .pipe(gulp.dest('dist/styles'));\n});\n\n// Concatenate and minify JavaScript. Optionally transpiles ES2015 code to ES5.\n// to enables ES2015 support remove the line `\"only\": \"gulpfile.babel.js\",` in the\n// `.babelrc` file.\ngulp.task('scripts', () =>\n        gulp.src([\n            // Note: Since we are not using useref in the scripts build pipeline,\n            //       you need to explicitly list your scripts here in the right order\n            //       to be correctly concatenated\n            './app/scripts/main.js'\n            // Other scripts\n        ])\n            .pipe($.newer('.tmp/scripts'))\n            .pipe($.sourcemaps.init())\n            .pipe($.babel())\n            .pipe($.sourcemaps.write())\n            .pipe(gulp.dest('.tmp/scripts'))\n            .pipe($.concat('main.min.js'))\n            .pipe($.uglify({preserveComments: 'some'}))\n            // Output files\n            .pipe($.size({title: 'scripts'}))\n            .pipe($.sourcemaps.write('.'))\n            .pipe(gulp.dest('dist/scripts'))\n);\n\n// Scan your HTML for assets & optimize them\ngulp.task('html', () => {\n    return gulp.src('app/**/*.html')\n        .pipe($.useref({searchPath: '{.tmp,app}'}))\n        // Remove any unused CSS\n        .pipe($.if('*.css', $.uncss({\n            html: [\n                'app/index.html'\n            ],\n            // CSS Selectors for UnCSS to ignore\n            ignore: []\n        })))\n\n        // Concatenate and minify styles\n        // In case you are still using useref build blocks\n        .pipe($.if('*.css', $.minifyCss()))\n\n        // Minify any HTML\n        .pipe($.if('*.html', $.minifyHtml()))\n        // Output files\n        .pipe($.if('*.html', $.size({title: 'html', showFiles: true})))\n        .pipe(gulp.dest('dist'))\n\n});\n\n// Clean output directory\ngulp.task('clean', cb => del(['.tmp', 'dist/*', '!dist/.git'], {dot: true}));\n\n// Watch files for changes & reload\ngulp.task('serve', ['scripts', 'styles'], () => {\n    browserSync({\n        notify: true,\n        // Customize the Browsersync console logging prefix\n        logPrefix: 'WSK',\n        // Allow scroll syncing across breakpoints\n        scrollElementMapping: ['main', '.mdl-layout'],\n        // Run as an https by uncommenting 'https: true'\n        // Note: this uses an unsigned certificate which on first access\n        //       will present a certificate warning in the browser.\n        // https: true,\n        server: ['.tmp', 'app'],\n        port: 3000\n    });\n\n    gulp.watch(['app/**/*.html'], reload);\n    gulp.watch(['app/styles/**/*.{scss,css}'], ['styles', reload]);\n    gulp.watch(['app/scripts/**/*.js'], ['lint', 'scripts']);\n    gulp.watch(['app/images/**/*'], reload)\n});\n\n// Build and serve the output from the dist build\ngulp.task('serve:dist', ['default'], () =>\n        browserSync({\n            notify: true,\n            logPrefix: 'WSK',\n            // Allow scroll syncing across breakpoints\n            scrollElementMapping: ['main', '.mdl-layout'],\n            // Run as an https by uncommenting 'https: true'\n            // Note: this uses an unsigned certificate which on first access\n            //       will present a certificate warning in the browser.\n            // https: true,\n            server: 'dist',\n            port: 3001\n        })\n);\n\n// Build production files, the default task\ngulp.task('default', ['clean'], cb =>\n        runSequence(\n            'styles',\n            ['lint', 'html', 'scripts', 'images', 'copy'],\n            'generate-service-worker',\n            cb\n        )\n);\n\n// Run PageSpeed Insights\ngulp.task('pagespeed', cb =>\n        // Update the below URL to the public URL of your site\n        pagespeed('example.com', {\n            strategy: 'mobile'\n            // By default we use the PageSpeed Insights free (no API key) tier.\n            // Use a Google Developer API key if you have one: http://goo.gl/RkN0vE\n            // key: 'YOUR_API_KEY'\n        }, cb)\n);\n\n// Copy over the scripts that are used in importScripts as part of the generate-service-worker task.\ngulp.task('copy-sw-scripts', () => {\n    return gulp.src(['node_modules/sw-toolbox/sw-toolbox.js', 'app/scripts/sw/runtime-caching.js'])\n        .pipe(gulp.dest('dist/scripts/sw'));\n});\n\n// See http://www.html5rocks.com/en/tutorials/service-worker/introduction/ for\n// an in-depth explanation of what service workers are and why you should care.\n// Generate a service worker file that will provide offline functionality for\n// local resources. This should only be done for the 'dist' directory, to allow\n// live reload to work as expected when serving from the 'app' directory.\ngulp.task('generate-service-worker', ['copy-sw-scripts'], () => {\n    const rootDir = 'dist';\n    const filepath = path.join(rootDir, 'service-worker.js');\n\n    return swPrecache.write(filepath, {\n        // Used to avoid cache conflicts when serving on localhost.\n        cacheId: pkg.name || 'web-starter-kit',\n        // sw-toolbox.js needs to be listed first. It sets up methods used in runtime-caching.js.\n        importScripts: [\n            'scripts/sw/sw-toolbox.js',\n            'scripts/sw/runtime-caching.js'\n        ],\n        staticFileGlobs: [\n            // Add/remove glob patterns to match your directory setup.\n            `${rootDir}/images/**/*`,\n            `${rootDir}/scripts/**/*.js`,\n            `${rootDir}/styles/**/*.css`,\n            `${rootDir}/*.{html,json}`\n        ],\n        // Translates a static file path to the relative URL that it's served from.\n        stripPrefix: path.join(rootDir, path.sep)\n    });\n});\n\n// Load custom tasks from the `tasks` directory\n// Run: `npm install --save-dev require-dir` from the command-line\n// try { require('require-dir')('tasks'); } catch (err) { console.error(err); }\n"]}